1. Работа с историей изменений. Написать команды:
которая выводит сообщения и автора всех коммитов из ветки develop-feature1, которые сделаны за последние 3 часа и которых нет в родительских ветках (develop, master). Сортировка по дате, первые более новые.
выводит для каждого коммита из веток master, develop, в сообщении которых есть упоминание заданного номера задачи (допустим задачи 231), его сообщение, автора и дату. Сортировка по дате, первые более новые.

2. “Избирательное слияние”. 
Дано: После слияния ветки develop-feature1 в develop, вы продолжили работать в ветке develop-feature1, а develop отдали на тестирование, потом исправили ошибку и закоммитили исправление в develop-feature1, сделали push. Через какое-то время тим лид говорит, что это критический фикс, и надо включить его в develop. Вы делаете pull в ветке develop-feature1 и оказывается, что ваш коллега сделал еще 3 коммита после вашего, и они не стабильные, поэтому не должны быть включены в develop. 
Задание: как добавить в develop только ваш коммит, но чтобы 3 коммита после него в develop не попали?


3. “Исправление ошибок”.
Дано: Вы начали работу над новой фичей и создали от develop дочернюю ветку develop-feature3.
Сделали там несколько коммитов, и синхронизировались с сервером - все ваши изменения теперь в develop-feature3 на сервере. И тут вы вспомнили, что тим лид строго настрого сказал, что сообщение каждого коммита должно быть форматировано определенным образом (см. примечание п.0) и обязательно содержать номер задачи. А вы об этом забыли и теперь на сервере лежит ветка develop-feature1с “плохими” сообщениями. Задание: Предложите вариант, как наиболее просто исправить ситуацию, чтобы тим лид не увидел ваш промах.


При решении задачи описывайте общую идею, а также приводите shell-комманды с поясняющими комментариями, в том числе и об использованных параметрах. 
Например:
$git log --oneline HEAD --no-merges
вывод в одну строку (сообщения и сокращенного хеша) информации о коммитах из текущей ветки. за исключением коммитов слияния.


git checkout  develop-feature3
git rebase -i HEAD~2
получаем в редакторе:

pick 2b50960 not good commit
pick c1aba12 one more not good commit

В редакторе меняем pick на edit, сохраняем, закрываем.

в консоле пишем 

git commit –amend
изменяем в редакторе коммит на 1951: now good(not good commit)
, сохраняем, закрываем

$ git rebase –continue


Для второго коммита то же самое 

В конце получаем: Successfully rebased and updated refs/heads/develop-feature3.
2019